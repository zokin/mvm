// Copyright (c) Tamas Csala

#ifndef OGLWRAP_ENUMS_PIXEL_STORAGE_MODE_H_
#define OGLWRAP_ENUMS_PIXEL_STORAGE_MODE_H_

#include "../config.h"

namespace OGLWRAP_NAMESPACE_NAME {
namespace enums {

enum class PixelStorageMode : GLenum {
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_SWAP_BYTES)
  kPackSwapBytes = GL_PACK_SWAP_BYTES,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_LSB_FIRST)
  kPackLsbFirst = GL_PACK_LSB_FIRST,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_ROW_LENGTH)
  kPackRowLength = GL_PACK_ROW_LENGTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_SKIP_ROWS)
  kPackSkipRows = GL_PACK_SKIP_ROWS,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_SKIP_PIXELS)
  kPackSkipPixels = GL_PACK_SKIP_PIXELS,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_ALIGNMENT)
  kPackAlignment = GL_PACK_ALIGNMENT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_IMAGE_HEIGHT)
  kPackImageHeight = GL_PACK_IMAGE_HEIGHT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_SKIP_IMAGES)
  kPackSkipImages = GL_PACK_SKIP_IMAGES,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_COMPRESSED_BLOCK_WIDTH)
  kPackCompressedBlockWidth = GL_PACK_COMPRESSED_BLOCK_WIDTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_COMPRESSED_BLOCK_HEIGHT)
  kPackCompressedBlockHeight = GL_PACK_COMPRESSED_BLOCK_HEIGHT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_COMPRESSED_BLOCK_DEPTH)
  kPackCompressedBlockDepth = GL_PACK_COMPRESSED_BLOCK_DEPTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_PACK_COMPRESSED_BLOCK_SIZE)
  kPackCompressedBlockSize = GL_PACK_COMPRESSED_BLOCK_SIZE,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_COMPRESSED_BLOCK_WIDTH)
  kUnpackCompressedBlockWidth = GL_UNPACK_COMPRESSED_BLOCK_WIDTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_COMPRESSED_BLOCK_HEIGHT)
  kUnpackCompressedBlockHeight = GL_UNPACK_COMPRESSED_BLOCK_HEIGHT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_COMPRESSED_BLOCK_DEPTH)
  kUnpackCompressedBlockDepth = GL_UNPACK_COMPRESSED_BLOCK_DEPTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_COMPRESSED_BLOCK_SIZE)
  kUnpackCompressedBlockSize = GL_UNPACK_COMPRESSED_BLOCK_SIZE,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_SWAP_BYTES)
  kUnpackSwapBytes = GL_UNPACK_SWAP_BYTES,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_LSB_FIRST)
  kUnpackLsbFirst = GL_UNPACK_LSB_FIRST,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_ROW_LENGTH)
  kUnpackRowLength = GL_UNPACK_ROW_LENGTH,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_SKIP_ROWS)
  kUnpackSkipRows = GL_UNPACK_SKIP_ROWS,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_SKIP_PIXELS)
  kUnpackSkipPixels = GL_UNPACK_SKIP_PIXELS,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_ALIGNMENT)
  kUnpackAlignment = GL_UNPACK_ALIGNMENT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_IMAGE_HEIGHT)
  kUnpackImageHeight = GL_UNPACK_IMAGE_HEIGHT,
#endif
#if OGLWRAP_DEFINE_EVERYTHING || defined(GL_UNPACK_SKIP_IMAGES)
  kUnpackSkipImages = GL_UNPACK_SKIP_IMAGES,
#endif
};

}  // namespace enums
using namespace enums;
}  // namespace oglwrap

#endif
